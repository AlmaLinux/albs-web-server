"""add oval and errata support

Revision ID: 9fd39736120e
Revises: 433fd427f579
Create Date: 2022-05-06 17:58:50.297681

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "9fd39736120e"
down_revision = "433fd427f579"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "errata_cves",
        sa.Column("id", sa.Text(), nullable=False),
        sa.Column("cvss3", sa.Text(), nullable=False),
        sa.Column("cwe", sa.Text(), nullable=True),
        sa.Column("impact", sa.Text(), nullable=True),
        sa.Column("public", sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "errata_records",
        sa.Column("id", sa.Text(), nullable=False),
        sa.Column("platform_id", sa.Integer(), nullable=False),
        sa.Column("summary", sa.Text(), nullable=True),
        sa.Column("solution", sa.Text(), nullable=True),
        sa.Column("issued_date", sa.DateTime(), nullable=False),
        sa.Column("updated_date", sa.DateTime(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("original_description", sa.Text(), nullable=False),
        sa.Column("title", sa.Text(), nullable=True),
        sa.Column("original_title", sa.Text(), nullable=False),
        sa.Column("contact_mail", sa.Text(), nullable=False),
        sa.Column("status", sa.Text(), nullable=False),
        sa.Column("version", sa.Text(), nullable=False),
        sa.Column("severity", sa.Text(), nullable=False),
        sa.Column("rights", sa.Text(), nullable=False),
        sa.Column("definition_id", sa.Text(), nullable=False),
        sa.Column("definition_version", sa.Text(), nullable=False),
        sa.Column("definition_class", sa.Text(), nullable=False),
        sa.Column(
            "affected_cpe", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column("criteria", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "original_criteria", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column("tests", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "original_tests", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column("objects", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "original_objects", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.Column("states", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "original_states", postgresql.JSONB(astext_type=sa.Text()), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["platform_id"],
            ["platforms.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "errata_packages",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("errata_record_id", sa.Text(), nullable=False),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("version", sa.Text(), nullable=False),
        sa.Column("release", sa.Text(), nullable=False),
        sa.Column("epoch", sa.Integer(), nullable=False),
        sa.Column("arch", sa.Text(), nullable=False),
        sa.Column("source_srpm", sa.Text(), nullable=True),
        sa.Column("reboot_suggested", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["errata_record_id"],
            ["errata_records.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "errata_references",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("href", sa.Text(), nullable=False),
        sa.Column("ref_id", sa.Text(), nullable=False),
        sa.Column("title", sa.Text(), nullable=False),
        sa.Column(
            "ref_type",
            sa.Enum("cve", "self_ref", "bugzilla", "rhsa", name="erratareferencetype"),
            nullable=False,
        ),
        sa.Column("errata_record_id", sa.Text(), nullable=False),
        sa.Column("cve_id", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["cve_id"],
            ["errata_cves.id"],
        ),
        sa.ForeignKeyConstraint(
            ["errata_record_id"],
            ["errata_records.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "errata_to_albs_packages",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("errata_package_id", sa.Integer(), nullable=False),
        sa.Column("albs_artifact_id", sa.Integer(), nullable=True),
        sa.Column("pulp_href", sa.Text(), nullable=True),
        sa.Column(
            "status",
            sa.Enum("proposal", "skipped", "released", name="erratapackagestatus"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["albs_artifact_id"],
            ["build_artifacts.id"],
        ),
        sa.ForeignKeyConstraint(
            ["errata_package_id"],
            ["errata_packages.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("errata_to_albs_packages")
    op.drop_table("errata_references")
    op.drop_table("errata_packages")
    op.drop_table("errata_records")
    op.drop_table("errata_cves")
    # ### end Alembic commands ###
