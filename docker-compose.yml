version: "3.9"

services:

  db:
    image: postgres:13
    env_file:
      - vars.env
    environment:
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --encoding=UTF8 --locale=en_US.UTF-8 --data-checksums
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - "../volumes/postgresql/data:/var/lib/postgresql/data"
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  rabbitmq:
    image: rabbitmq:3.8-management
    container_name: "rabbitmq-ts"
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - vars.env
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  alts-celery:
    image: alts-celery:latest
    build:
      dockerfile: Dockerfile.celery
      context: ../alts
    environment:
      CELERY_CONFIG_PATH: "/celery_config.yaml"
      EXTERNAL_NETWORK: "albs-web-server_default"
    command: "bash -c 'source env/bin/activate && pip3 install --upgrade pip &&
        pip3 install -r /tmp/requirements/celery.txt --no-cache-dir && celery
        -A alts.worker.app worker --pool=threads --concurrency=20
        --loglevel=INFO -Q docker-x86_64-0 -O fair --without-gossip
        --without-mingle --without-heartbeat'"
    restart: on-failure
    privileged: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ../alts/configs/alts_config.yaml:/celery_config.yaml
      - ../alts/alts:/code/alts
      - ../alts/resources:/code/resources
      - ../alts/tests:/code/tests
      - ../alts/requirements:/tmp/requirements
    depends_on:
      - rabbitmq
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  alts-scheduler:
    image: alts-scheduler:latest
    build:
      dockerfile: Dockerfile.scheduler
      context: ../alts
    ports:
      - "8082:8000"
    environment:
      CELERY_CONFIG_PATH: "/scheduler_config.yaml"
      SCHEDULER_CONFIG_PATH: "/scheduler_config.yaml"
    command: "bash -c 'source env/bin/activate && \
                       pip3 install --upgrade pip && \
                       pip3 install -r /tmp/requirements/scheduler.txt --no-cache-dir && \
                       /wait_for_it.sh web_server:8000 && \
                       uvicorn --host 0.0.0.0 alts.scheduler.app:app --limit-concurrency 100 --backlog 1000'"
    restart: on-failure
    volumes:
      - ../alts/configs/alts_config.yaml:/scheduler_config.yaml
      - ../alts/alts:/code/alts
      - ../alts/resources:/code/resources
      - ../alts/tests:/code/tests
      - ../alts/requirements:/tmp/requirements
    depends_on:
      - rabbitmq
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  web_server:
    image: quay.io/almalinuxorg/albs:latest
    env_file:
      - vars.env
    ports:
      - "8088:8000"
    build:
      dockerfile: Dockerfile
      context: .
    volumes:
      - "./alws:/code/alws"
      - "./requirements.txt:/code/requirements.txt"
      - "./tests:/code/tests"
      - "./almalinux:/code/almalinux"
      - "./scripts:/code/scripts"
      - "../volumes/pulp/exports:/srv/exports"
      - "./reference_data:/code/reference_data"
    command:
      bash -c 'source env/bin/activate &&
               /wait_for_it.sh db:5432 &&
               PYTHONPATH="." alembic --config alws/alembic.ini upgrade head &&
               pip3 install --upgrade pip &&
               pip3 install -r requirements.txt &&
               uvicorn --host 0.0.0.0 alws.app:app'
    restart: on-failure
    depends_on:
      - db
      - pulp
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  task_queue:
    image: quay.io/almalinuxorg/task-queue:latest
    env_file:
      - vars.env
    build:
      dockerfile: Dockerfile.task-queue
      context: .
    volumes:
      - "./alws:/code/alws"
      - "./tests:/code/tests"
      - "./scripts:/code/scripts"
      - "./reference_data:/code/reference_data"
      - "./requirements.txt:/code/requirements.txt"
    command: bash -c 'source env/bin/activate &&
                      /wait_for_it.sh rabbitmq:5672 &&
                      pip3 install --upgrade pip &&
                      pip3 install -r requirements.txt --no-cache-dir &&
                      dramatiq alws.dramatiq --threads 1 -Q default'
    restart: on-failure
    depends_on:
      - db
      - pulp
      - rabbitmq
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  task_queue_builds:
    image: quay.io/almalinuxorg/task-queue:latest
    env_file:
      - vars.env
    build:
      dockerfile: Dockerfile.task-queue
      context: .
    volumes:
      - "./alws:/code/alws"
      - "./requirements.txt:/code/requirements.txt"
    command: bash -c 'source env/bin/activate &&
                      /wait_for_it.sh rabbitmq:5672 &&
                      pip3 install --upgrade pip &&
                      pip3 install -r requirements.txt --no-cache-dir &&
                      dramatiq alws.dramatiq --threads 1 -Q builds'
    restart: on-failure
    depends_on:
      - db
      - pulp
      - rabbitmq
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  task_queue_errata:
    image: quay.io/almalinuxorg/task-queue:latest
    env_file:
      - vars.env
    build:
      dockerfile: Dockerfile.task-queue
      context: .
    volumes:
      - "./alws:/code/alws"
      - "./requirements.txt:/code/requirements.txt"
    command: bash -c 'source env/bin/activate &&
                      /wait_for_it.sh rabbitmq:5672 &&
                      pip3 install --upgrade pip &&
                      pip3 install -r requirements.txt --no-cache-dir &&
                      dramatiq alws.dramatiq --processes 1 --threads 1 -Q errata'
    restart: on-failure
    depends_on:
      - db
      - pulp
      - rabbitmq
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  task_queue_releases:
    image: quay.io/almalinuxorg/task-queue:latest
    env_file:
      - vars.env
    build:
      dockerfile: Dockerfile.task-queue
      context: .
    volumes:
      - "./alws:/code/alws"
      - "./requirements.txt:/code/requirements.txt"
    command: bash -c 'source env/bin/activate &&
                      /wait_for_it.sh rabbitmq:5672 &&
                      pip3 install --upgrade pip &&
                      pip3 install -r requirements.txt --no-cache-dir &&
                      dramatiq alws.dramatiq --processes 1 --threads 1 -Q releases'
    restart: on-failure
    depends_on:
      - db
      - pulp
      - rabbitmq
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  task_queue_sign:
    image: quay.io/almalinuxorg/task-queue:latest
    env_file:
      - vars.env
    build:
      dockerfile: Dockerfile.task-queue
      context: .
    volumes:
      - "./alws:/code/alws"
      - "./requirements.txt:/code/requirements.txt"
    command: bash -c 'source env/bin/activate &&
                      pip3 install --upgrade pip &&
                      pip3 install -r requirements.txt --no-cache-dir &&
                      dramatiq alws.dramatiq --processes 1 --threads 1 -Q sign'
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  task_queue_product_modify:
    image: quay.io/almalinuxorg/task-queue:latest
    env_file:
      - vars.env
    build:
      dockerfile: Dockerfile.task-queue
      context: .
    volumes:
      - "./alws:/code/alws"
      - "./requirements.txt:/code/requirements.txt"
    command: bash -c 'source env/bin/activate &&
                      pip3 install --upgrade pip &&
                      pip3 install -r requirements.txt --no-cache-dir &&
                      dramatiq alws.dramatiq --processes 3 --threads 1 -Q product_modify'
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  task_queue_tests:
    image: quay.io/almalinuxorg/task-queue:latest
    env_file:
      - vars.env
    build:
      dockerfile: Dockerfile.task-queue
      context: .
    volumes:
      - "./alws:/code/alws"
      - "./requirements.txt:/code/requirements.txt"
    command: bash -c 'source env/bin/activate &&
                      /wait_for_it.sh rabbitmq:5672 &&
                      pip3 install --upgrade pip &&
                      pip3 install -r requirements.txt --no-cache-dir &&
                      dramatiq alws.dramatiq --processes 1 --threads 1 -Q tests'
    restart: on-failure
    depends_on:
      - db
      - pulp
      - rabbitmq
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  frontend:
    image: quay.io/almalinuxorg/albs-frontend:latest
    env_file:
      - vars.env
    build:
      dockerfile: Dockerfile
      context: ../albs-frontend
    command: bash -c "npm install && npm run dev"
    volumes:
      - "../albs-frontend:/home/albs/code"
      - "frontend_node_modules:/code/node_modules"
    restart: on-failure
    depends_on:
      - web_server
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  build_node:
    image: quay.io/almalinuxorg/albs-node:latest
    privileged: true
    build:
      context: ../albs-node/
      dockerfile: ./Dockerfile
    env_file:
      - vars.env
    volumes:
      # TODO: Hack for development, put placeholder here instead
      - "../albs-node/node-config:/home/alt/.config"
      - "../albs-node/requirements.txt:/build-node/requirements.txt"
      - "../albs-node/build_node:/build-node/build_node"
      - "../albs-node/almalinux_build_node.py:/build-node/almalinux_build_node.py"
    restart: on-failure
    command: "bash -c '/wait_for_it.sh web_server:8000 &&
                       source env/bin/activate &&
                       pip3 install --upgrade pip &&
                       pip3 install -r requirements.txt --no-cache-dir &&
                       python3 almalinux_build_node.py -v -t 2'"
    depends_on:
      - web_server
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  sign_node:
    image: quay.io/almalinuxorg/albs-sign-node:latest
    build:
      context: ../albs-sign-node/
      dockerfile: ./Dockerfile
    env_file:
      - vars.env
    volumes:
      # TODO: Hack for development, put placeholder here instead
      - "../albs-sign-node/node-config:/home/alt/.config"
      - "~/.gnupg:/home/alt/.gnupg"
      - "../albs-sign-node/almalinux_sign_node.py:/sign-node/almalinux_sign_node.py"
      - "../albs-sign-node/sign_node:/sign-node/sign_node"
      - "../albs-sign-node/requirements.txt:/sign-node/requirements.txt"
    restart: on-failure
    command: "bash -c '/wait_for_it.sh web_server:8000 &&
                       source env/bin/activate &&
                       pip3 install --upgrade pip &&
                       pip3 install -r requirements.txt --no-cache-dir &&
                       python3 almalinux_sign_node.py -v'"
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  gitea_listener:
    image: quay.io/almalinuxorg/gitea-listener:latest
    build:
      dockerfile: Dockerfile.gitea-listener
      context: .
    env_file:
      - vars.env
    restart: on-failure
    depends_on:
      - mosquitto
    volumes:
      - "./alws/scripts/albs-gitea-listener/gitea_listener.py:/code/gitea_listener.py"
      - "./alws/scripts/albs-gitea-listener/gitea_models.py:/code/gitea_models.py"
      - "./alws/scripts/albs-gitea-listener/albs-gitea-listener-config.yaml:/code/albs-gitea-listener-config.yaml"
      - "./alws/scripts/git_cacher/git_cacher.py:/code/git_cacher.py"
      - "./alws:/code/alws"
      - "./alws/scripts/albs-gitea-listener/requirements.txt:/code/requirements.txt"
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  git_cacher:
    image: quay.io/almalinuxorg/git-cacher:latest
    build:
      dockerfile: Dockerfile.git-cacher
      context: .
    env_file:
      - vars.env
    restart: on-failure
    depends_on:
      - redis
    volumes:
      - "./alws:/code/alws"
      - "./alws/scripts/git_cacher/git_cacher.py:/code/git_cacher.py"
      - "./alws/scripts/git_cacher/requirements.txt:/code/requirements.txt"
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  tests_cacher:
    image: alma-tests-cacher:latest
    build:
      context: ../alma-tests-cacher/
      dockerfile: Dockerfile
    restart: on-failure
    depends_on:
      - web_server
    volumes:
      - "../alma-tests-cacher/alma_tests_cacher:/code/alma_tests_cacher"
      - "../alma-tests-cacher/alma_tests_cacher.py:/code/alma_tests_cacher.py"
      - "../alma-tests-cacher/requirements.txt:/code/requirements.txt"
      - "../alma-tests-cacher/vars.yaml:/code/vars.yaml"
    command: "bash -c '/wait_for_it.sh web_server:8000 &&
              source env/bin/activate &&
              pip3 install --upgrade pip &&
              pip3 install -r /code/requirements.txt --no-cache-dir &&
              python alma_tests_cacher.py'"
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  pulp:
    # image: pulp/pulp
    # after downgrading pulp you probably should to remove pulp volumes
    image: pulp/pulp:upgrade
    ports:
      - 8081:80
      - 5431:5432
    volumes:
      - "../volumes/pulp/settings:/etc/pulp"
      - "../volumes/pulp/exports:/srv/exports"
      - "../volumes/pulp/pulp_storage:/var/lib/pulp"
      - "../volumes/pulp/pgsql:/var/lib/pgsql"
      - "../volumes/pulp/containers:/var/lib/containers"
      - "./pulp_init.sh:/usr/local/bin/pulp_init.sh"
    devices:
      - "/dev/fuse"
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"
    #  echo "listen_addresses = '*'" >> /var/lib/pgsql/data/postgresql.conf &&
    #  echo "host all all 0.0.0.0/0 md5" >> /var/lib/pgsql/data/pg_hba.conf &&
    #  echo "host all all ::/0 md5" >> /var/lib/pgsql/data/pg_hba.conf &&
    #  runuser postgres -c 'echo "ALTER USER postgres WITH PASSWORD '"'"'password'"'"';" | /usr/bin/psql'

  mosquitto:
    image: eclipse-mosquitto:2.0
    ports:
      - "11883:1883"
    volumes:
      - "./mosquitto-no-auth.conf:/mosquitto/config/mosquitto.conf"
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  redis:
    image: redis
    ports:
      - 6379:6379
    volumes:
      - "redis:/data"
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  nginx:
    image: nginx
    ports:
      - 8080:80
    volumes:
      - "./nginx_configs:/etc/nginx/conf.d"
    depends_on:
      - web_server
      - frontend
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  immudb:
    image: codenotary/immudb:1.5
    ports:
      - 3322:3322
      - 9497:9497
    volumes:
      - "../volumes/immudb/data:/var/lib/immudb:Z"
      - "../volumes/immudb/config:/etc/immudb:Z"
      - "../volumes/immudb/logs:/var/log/immudb:Z"
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  sign_file:
    image: sign-file:latest
    build:
      dockerfile: Dockerfile
      context: ../albs-sign-file
    command: >
      bash -c "/app/env/bin/python /app/db_manage.py dev_init
      && /app/env/bin/python /app/start.py"
    restart: on-failure
    volumes:
      - "~/.gnupg:/home/alt/.gnupg"
      - ../albs-sign-file/sign:/app/sign
      - ../albs-sign-file/start.py:/app/start.py
      - ../albs-sign-file/db_manage.py:/app/db_manage.py
    ports:
      - "8083:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

volumes:
  frontend_node_modules:
  redis:
