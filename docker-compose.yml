version: "3.9"

services:

  db:
    image: postgres:13
    env_file:
      - vars.env
    environment:
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --encoding=UTF8 --locale=en_US.UTF-8 --data-checksums
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - "../volumes/postgresql/data:/var/lib/postgresql/data"

  rabbitmq:
    image: rabbitmq:3.8-management
    container_name: "rabbitmq-ts"
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - vars.env
    restart: always

  alts-celery:
    image: alts-celery:latest
    build:
      dockerfile: Dockerfile.celery
      context: ../alts
    environment:
      CELERY_CONFIG_PATH: "/celery_config.yaml"
      EXTERNAL_NETWORK: "albs-web-server_default"
    command: "bash -c 'source env/bin/activate && celery
        -A alts.worker.app worker --pool=threads --concurrency=20
        --loglevel=INFO -Q docker-x86_64-0 -O fair --without-gossip
        --without-mingle --without-heartbeat'"
    restart: on-failure
    privileged: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ../alts/configs/alts_config.yaml:/celery_config.yaml
    depends_on:
      - rabbitmq

  alts-scheduler:
    image: alts-scheduler:latest
    build:
      dockerfile: Dockerfile.scheduler
      context: ../alts
    ports:
      - "8082:8000"
    environment:
      CELERY_CONFIG_PATH: "/scheduler_config.yaml"
      SCHEDULER_CONFIG_PATH: "/scheduler_config.yaml"
    command: "bash -c 'source env/bin/activate && uvicorn --host 0.0.0.0
        alts.scheduler.app:app --limit-concurrency 100 --backlog 1000'"
    restart: on-failure
    volumes:
      - ../alts/configs/alts_config.yaml:/scheduler_config.yaml
    depends_on:
      - rabbitmq

  web_server:
    image: al-web-server:latest
    env_file:
      - vars.env
    ports:
      - "8088:8000"
    build:
      dockerfile: Dockerfile
      context: .
    volumes:
      - "./alws:/code/alws"
      - "./scripts:/code/scripts"
      - "../volumes/pulp/exports:/srv/exports"
      - "./reference_data:/code/reference_data"
    command:
        bash -c 'source env/bin/activate &&
                 /wait_for_it.sh db:5432 &&
                 PYTHONPATH="." alembic --config alws/alembic.ini upgrade head &&
                 uvicorn --host 0.0.0.0 alws.app:app'
    restart: on-failure
    depends_on:
      - db
      - pulp

  task_queue:
    image: albs-task-queue:latest
    env_file:
      - vars.env
    build:
      dockerfile: Dockerfile.task-queue
      context: .
    volumes:
      - "./alws:/code/alws"
      - "./scripts:/code/scripts"
      - "./reference_data:/code/reference_data"
    command: bash -c 'source env/bin/activate &&
                      /wait_for_it.sh rabbitmq:5672 &&
                      dramatiq --threads 1 alws.dramatiq.build'
    restart: on-failure
    depends_on:
      - db
      - pulp
      - web_server
      - rabbitmq

  frontend:
    image: albs-frontend:latest
    env_file:
      - vars.env
    build:
      dockerfile: Dockerfile
      # TODO: Hack for developement, put https://github.com/AlmaLinux/albs-frontend here instead
      context: ../albs-frontend
    command: bash -c "npm install && npm run dev"
    volumes:
      - "../albs-frontend:/code"
      - "../node_modules:/code/node_modules"
    restart: on-failure
    depends_on:
      - web_server

  build_node:
    image: albs-node:latest
    privileged: true
    env_file:
      - vars.env
    build:
      # TODO: Hack for developement, put https://github.com/AlmaLinux/albs-node here instead
      context: ../albs-node
      dockerfile: Dockerfile
    volumes:
      # TODO: Hack for developement, put placeholder here instead
      - "../albs-node/node-config:/home/alt/.config"
    restart: on-failure
    command: "bash -c '/wait_for_it.sh web_server:8000 && source env/bin/activate && ./almalinux_build_node.py -v -t 2'"
    depends_on:
      - web_server

  sign_node:
    image: sign-node:latest
    env_file:
      - vars.env
    build:
      context: ../albs-sign-node
      dockerfile: Dockerfile
    volumes:
      # TODO: Hack for developement, put placeholder here instead
      - "../albs-sign-node/node-config:/home/alt/.config"
      - "~/.gnupg:/home/alt/.gnupg"
    restart: on-failure
    command: "bash -c '/wait_for_it.sh web_server:8000 && source env/bin/activate && ./almalinux_sign_node.py -v'"

  gitea_listener:
    image: albs-gitea-listener:latest
    env_file:
      - vars.env
    build:
      context: .
      dockerfile: Dockerfile.gitea-listener
    restart: on-failure
    depends_on:
      - mosquitto

  oval_cacher:
    image: albs-oval-cacher:latest
    env_file:
      - vars.env
    build:
      context: .
      dockerfile: Dockerfile.oval-cacher
    restart: "no"
    depends_on:
      - web_server
    command: "bash -c '/wait_for_it.sh web_server:8000 && source env/bin/activate && PYTHONPATH='.' python alws/scripts/oval_cacher/oval_cacher.py'"

  git_cacher:
    image: albs-git-cacher:latest
    env_file:
      - vars.env
    build:
      context: .
      dockerfile: Dockerfile.git-cacher
    restart: on-failure
    depends_on:
      - redis

  pulp:
    image: pulp/pulp
    ports:
      - 8081:80
    volumes:
      - "../volumes/pulp/settings:/etc/pulp"
      - "../volumes/pulp/exports:/srv/exports"
      - "../volumes/pulp/pulp_storage:/var/lib/pulp"
      - "../volumes/pulp/pgsql:/var/lib/pgsql"
      - "../volumes/pulp/containers:/var/lib/containers"
    devices:
      - "/dev/fuse"
    restart: on-failure
    #  echo "listen_addresses = '*'" >> /var/lib/pgsql/data/postgresql.conf &&
    #  echo "host all all 0.0.0.0/0 md5" >> /var/lib/pgsql/data/pg_hba.conf &&
    #  echo "host all all ::/0 md5" >> /var/lib/pgsql/data/pg_hba.conf &&
    #  runuser postgres -c 'echo "ALTER USER postgres WITH PASSWORD '"'"'password'"'"';" | /usr/bin/psql'

  mosquitto:
    image: eclipse-mosquitto:2.0
    ports:
      - "11883:1883"

  redis:
    image: redis
    ports:
      - 6379:6379
    restart: on-failure

  nginx:
    image: nginx
    ports:
      - 8080:80
    volumes:
      - "./nginx_configs:/etc/nginx/conf.d"
    depends_on:
      - web_server
      - frontend
