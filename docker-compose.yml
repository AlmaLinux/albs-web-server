version: "3.9"

services:

  test_db:
    image: postgres:13
    env_file:
      - vars.env
    ports:
      - "5432:5432"

  web_server_tests:
    image: albs-web-server-tests:latest
    env_file:
      - vars.env
    build:
      context: .
      dockerfile: Dockerfile
      target: web-server-tests
    volumes:
      - ".:/code"

  db:
    image: postgres:13
    env_file:
      - vars.env
    environment:
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --encoding=UTF8 --locale=en_US.UTF-8 --data-checksums
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - "../volumes/postgresql/data:/var/lib/postgresql/data"
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  rabbitmq:
    image: rabbitmq:3.8-management
    container_name: "rabbitmq-ts"
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - vars.env
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  alts-celery:
    image: alts-celery:latest
    build:
      dockerfile: Dockerfile.celery
      context: ../alts
    environment:
      CELERY_CONFIG_PATH: "/celery_config.yaml"
      EXTERNAL_NETWORK: "${COMPOSE_PROJECT_NAME:-albs-web-server}_default"
    command:
      celery -A alts.worker.app worker
        --pool=threads --concurrency=20
        --loglevel=INFO -Q docker-x86_64-0 -O fair --without-gossip
        --without-mingle --without-heartbeat
    restart: on-failure
    privileged: true
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "../alts/configs/alts_config.yaml:/celery_config.yaml"
      - "../alts/alts:/code/alts"
      - "../alts/resources:/code/resources"
    depends_on:
      - rabbitmq
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  alts-scheduler:
    image: alts-scheduler:latest
    build:
      context: ../alts
      dockerfile: Dockerfile.scheduler
      target: alts-scheduler
    ports:
      - "8082:8000"
    environment:
      CELERY_CONFIG_PATH: "/scheduler_config.yaml"
      SCHEDULER_CONFIG_PATH: "/scheduler_config.yaml"
    command: |
      bash -c "
        set -ex
        /wait-for-it.sh web_server:8000
        uvicorn --host 0.0.0.0 alts.scheduler.app:app --limit-concurrency 100 --backlog 1000"
    restart: on-failure
    volumes:
      - "../alts/configs/alts_config.yaml:/scheduler_config.yaml"
      - "../alts/alts:/code/alts"
      - "../alts/resources:/code/resources"
    depends_on:
      - web_server
      - rabbitmq
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  web_server:
    image: albs-web-server:latest
    env_file:
      - vars.env
    ports:
      - "8088:8000"
    build:
      context: .
      dockerfile: Dockerfile
      target: web-server
    volumes:
      - "./alws:/code/alws"
      - "./scripts:/code/scripts"
      - "./reference_data:/code/reference_data"
      - "../volumes/pulp/exports:/srv/exports"
    command: |
      bash -c "
        set -ex
        /wait-for-it.sh db:5432
        PYTHONPATH=. alembic --config alws/alembic.ini upgrade head
        uvicorn --host 0.0.0.0 alws.app:app"
    restart: on-failure
    depends_on:
      - db
      - pulp
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  task_queue:
    image: task-queue:latest
    env_file:
      - vars.env
    build:
      dockerfile: Dockerfile.task-queue
      context: .
    volumes:
      - "./alws:/code/alws"
    command: |
      bash -c "
        set -ex
        /wait-for-it.sh rabbitmq:5672
        dramatiq alws.dramatiq --threads 1 -Q default"
    restart: on-failure
    depends_on:
      - db
      - pulp
      - rabbitmq
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  task_queue_sources:
    image: task-queue:latest
    env_file:
      - vars.env
    build:
      dockerfile: Dockerfile.task-queue
      context: .
    volumes:
      - "./alws:/code/alws"
    command: |
      bash -c "
        set -ex
        /wait-for-it.sh rabbitmq:5672
        dramatiq alws.dramatiq --threads 1 -Q sources"
    restart: on-failure
    depends_on:
      - db
      - pulp
      - rabbitmq
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  task_queue_builds:
    image: task-queue:latest
    env_file:
      - vars.env
    build:
      dockerfile: Dockerfile.task-queue
      context: .
    volumes:
      - "./alws:/code/alws"
    command: |
      bash -c "
        set -ex
        /wait-for-it.sh rabbitmq:5672
        dramatiq alws.dramatiq --threads 1 -Q builds"
    restart: on-failure
    depends_on:
      - db
      - pulp
      - rabbitmq
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  task_queue_errata:
    image: task-queue:latest
    env_file:
      - vars.env
    build:
      dockerfile: Dockerfile.task-queue
      context: .
    volumes:
      - "./alws:/code/alws"
    command: |
      bash -c "
        set -ex
        /wait-for-it.sh rabbitmq:5672
        dramatiq alws.dramatiq --processes 1 --threads 1 -Q errata"
    restart: on-failure
    depends_on:
      - db
      - pulp
      - rabbitmq
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  task_queue_releases:
    image: task-queue:latest
    env_file:
      - vars.env
    build:
      dockerfile: Dockerfile.task-queue
      context: .
    volumes:
      - "./alws:/code/alws"
    command: |
      bash -c "
        set -ex
        /wait-for-it.sh rabbitmq:5672
        dramatiq alws.dramatiq --processes 1 --threads 1 -Q releases"
    restart: on-failure
    depends_on:
      - db
      - pulp
      - rabbitmq
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  task_queue_sign:
    image: task-queue:latest
    env_file:
      - vars.env
    build:
      dockerfile: Dockerfile.task-queue
      context: .
    volumes:
      - "./alws:/code/alws"
    command: dramatiq alws.dramatiq --processes 1 --threads 1 -Q sign
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  task_queue_product_modify:
    image: task-queue:latest
    env_file:
      - vars.env
    build:
      dockerfile: Dockerfile.task-queue
      context: .
    volumes:
      - "./alws:/code/alws"
    command: dramatiq alws.dramatiq --processes 3 --threads 1 -Q product_modify
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  task_queue_tests:
    image: task-queue:latest
    env_file:
      - vars.env
    build:
      dockerfile: Dockerfile.task-queue
      context: .
    volumes:
      - "./alws:/code/alws"
    command: |
      bash -c "
        set -ex
        /wait-for-it.sh rabbitmq:5672
        dramatiq alws.dramatiq --processes 1 --threads 1 -Q tests"
    restart: on-failure
    depends_on:
      - db
      - pulp
      - rabbitmq
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  frontend:
    image: albs-frontend:latest
    env_file:
      - vars.env
    build:
      dockerfile: Dockerfile
      context: ../albs-frontend
    command: npm run dev
    volumes:
      - "../albs-frontend:/home/albs/code"
    restart: on-failure
    depends_on:
      - web_server
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  build_node:
    image: albs-node:latest
    privileged: true
    build:
      context: ../albs-node
      dockerfile: Dockerfile
      target: albs-node
    env_file:
      - vars.env
    volumes:
      - "../albs-node/node-config/castor/build_node.yml:/root/.config/castor/build_node.yml"
      - "../albs-node/build_node:/build-node/build_node"
      - "../albs-node/almalinux_build_node.py:/build-node/almalinux_build_node.py"
    restart: on-failure
    command: |
      bash -c "
        set -ex
        /wait-for-it.sh web_server:8000
        python3 almalinux_build_node.py -v -t 2"
    depends_on:
      - web_server
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  sign_node:
    image: sign-node:latest
    build:
      context: ../albs-sign-node
      dockerfile: Dockerfile
      target: sign-node
    env_file:
      - vars.env
    volumes:
      - "~/.gnupg:/root/.gnupg"
      - "../albs-sign-node/node-config/sign_node.yml:/root/.config/sign_node.yml"
      - "../albs-sign-node/almalinux_sign_node.py:/sign-node/almalinux_sign_node.py"
      - "../albs-sign-node/sign_node:/sign-node/sign_node"
    restart: on-failure
    command: |
      bash -c "
        set -ex
        /wait-for-it.sh web_server:8000
        python3 almalinux_sign_node.py -v"
    depends_on:
      - web_server
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  gitea_listener:
    image: gitea-listener:latest
    build:
      dockerfile: Dockerfile.gitea-listener
      context: .
    env_file:
      - vars.env
    restart: on-failure
    depends_on:
      - mosquitto
    volumes:
      - "./alws/scripts/albs-gitea-listener/gitea_listener.py:/code/gitea_listener.py"
      - "./alws/scripts/albs-gitea-listener/gitea_models.py:/code/gitea_models.py"
      - "./alws/scripts/albs-gitea-listener/albs-gitea-listener-config.yaml:/code/albs-gitea-listener-config.yaml"
      - "./alws/scripts/git_cacher/git_cacher.py:/code/git_cacher.py"
      - "./alws:/code/alws"
    command: python3 gitea_listener.py
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  git_cacher:
    image: git-cacher:latest
    build:
      dockerfile: Dockerfile.git-cacher
      context: .
    env_file:
      - vars.env
    restart: on-failure
    depends_on:
      - redis
    volumes:
      - "./alws:/code/alws"
      - "./alws/scripts/git_cacher/git_cacher.py:/code/git_cacher.py"
    command: python3 git_cacher.py
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  tests_cacher:
    image: alma-tests-cacher:latest
    build:
      context: ../alma-tests-cacher
      dockerfile: Dockerfile
      target: cacher
    restart: on-failure
    volumes:
      - "../alma-tests-cacher/alma_tests_cacher:/code/alma_tests_cacher"
      - "../alma-tests-cacher/alma_tests_cacher.py:/code/alma_tests_cacher.py"
      - "../alma-tests-cacher/vars.yaml:/code/vars.yaml"
    command: |
      bash -c "
        set -ex
        /wait-for-it.sh web_server:8000
        python3 alma_tests_cacher.py"
    depends_on:
      - web_server
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  pulp:
    image: pulp/pulp:3.49.1
    ports:
      - 8081:80
      - 5431:5432
    volumes:
      - "../volumes/pulp/settings:/etc/pulp"
      - "../volumes/pulp/exports:/srv/exports"
      - "../volumes/pulp/pulp_storage:/var/lib/pulp"
      - "../volumes/pulp/pgsql:/var/lib/pgsql"
      - "../volumes/pulp/containers:/var/lib/containers"
      - "./pulp_init.sh:/usr/local/bin/pulp_init.sh"
    devices:
      - "/dev/fuse"
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"
    #  echo "listen_addresses = '*'" >> /var/lib/pgsql/data/postgresql.conf &&
    #  echo "host all all 0.0.0.0/0 md5" >> /var/lib/pgsql/data/pg_hba.conf &&
    #  echo "host all all ::/0 md5" >> /var/lib/pgsql/data/pg_hba.conf &&
    #  runuser postgres -c 'echo "ALTER USER postgres WITH PASSWORD '"'"'password'"'"';" | /usr/bin/psql'

  mosquitto:
    image: eclipse-mosquitto:2.0
    ports:
      - "11883:1883"
    volumes:
      - "./mosquitto-no-auth.conf:/mosquitto/config/mosquitto.conf"
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  redis:
    image: redis
    ports:
      - 6379:6379
    volumes:
      - "redis:/data"
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  nginx:
    image: nginx
    ports:
      - 8080:80
    volumes:
      - "./nginx_configs:/etc/nginx/conf.d"
    depends_on:
      - web_server
      - frontend
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  immudb:
    image: codenotary/immudb:1.5
    ports:
      - 3322:3322
      - 9497:9497
    volumes:
      - "../volumes/immudb/data:/var/lib/immudb:Z"
      - "../volumes/immudb/config:/etc/immudb:Z"
      - "../volumes/immudb/logs:/var/log/immudb:Z"
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

  sign_file:
    image: sign-file:latest
    build:
      context: ../albs-sign-file
      dockerfile: Dockerfile
      target: sign-file
    env_file: ../albs-sign-file/.env
    command: |
      bash -c "
        set -ex
        python3 db_manage.py dev_init
        python3 start.py"
    restart: on-failure
    volumes:
      - "${SF_HOST_GNUPG:-~/.gnupg}:/root/.gnupg"
      - "../albs-sign-file/sign:/app/sign"
      - "../albs-sign-file/start.py:/app/start.py"
      - "../albs-sign-file/db_manage.py:/app/db_manage.py"
    ports:
      - "8083:8000"
    logging:
      driver: "json-file"
      options:
        max-size: "100Mb"
        max-file: "3"

volumes:
  redis:
